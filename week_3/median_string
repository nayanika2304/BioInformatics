k = 3
dnas = ['AAATTGACGCAT',
       'GACGACCACGTT',
       'CGTCAGCGCCTG',
       'GCTGAGCACCGG',
       'AGTTCGGGACAG'
       ]

def hamming_problem(pattern1, pattern2):
    count = 0
    for i, j in zip(pattern1, pattern2):
        if i != j:
            count += 1
    return count

def median_string(infile):
    kmer_list = []
    with open(infile, 'r') as file:
        k = int(file.readline())
        dnas = file.readlines()

    for dna in dnas:
        for i in range(0, len(dna) - k + 1):
            dna_pattern = dna[i:i+k]
            if dna_pattern not in kmer_list:
                kmer_list.append(dna_pattern)
        distance = float('inf')
        for kmer in kmer_list:
            for i in range(0,len(dna)-k+1):
                if distance > hamming_problem(kmer,dna[i:i+k]):
                    distance = hamming_problem(kmer,dna[i:i+k])
                    median = kmer
    return median

infile = 'dataset_158_9.txt'
print(median_string(infile))

# def k_mers(neucleotide_number):
#     neucleotides = "AGTC"
#     k_mers = ["A", "G", "T", "C"]
#     k_mers_loop = []
#     while len(k_mers[0]) <= neucleotide_number - 1:
#         for i1 in neucleotides:
#             for i2 in k_mers:
#                 k_mers_loop.append(i1+i2)
#         k_mers = k_mers_loop
#         k_mers_loop = []
#     return k_mers
#
#
#
# def hamming_distance(a, b):
#     d = 0
#     for i,j in zip(a, b):
#         if i != j:
#             d += 1
#     return d
#
#
#
# def DNA_strings_k_mers(DNA_strings, k_mers_length):
#     DNA_strings_k_mers = []
#     for j1 in range(0,len(DNA_strings)):
#         DNA_strings_k_mers.append([])
#         for j2 in range(0, len(DNA_strings[j1])-(k_mers_length)):
#             j2_motif = DNA_strings[j1][j2 : j2 + k_mers_length]
#             DNA_strings_k_mers[j1].append(j2_motif)
#     return DNA_strings_k_mers
#
#
#
#
#
# def hamming_distance_sheet(DNA_strings_k_mers, k_mers):
#     hamming_distance_sheet = []
#     for k1 in range(0, len(k_mers)):
#         hamming_distance_sheet.append([])
#         for k2 in DNA_strings_k_mers:
#             d = []
#             for k3 in k2:
#                 d.append(hamming_distance(k_mers[k1], k3))
#             hamming_distance_sheet[k1].append(min(d))
#     print(hamming_distance_sheet)
#     return hamming_distance_sheet
#
#
#
#
#
#
# def motif_finding(DNA_strings, k_mer_length):
#     total_d_sum = []
#     for l1 in range(0, len(hamming_distance_sheet(DNA_strings_k_mers(DNA_strings, k_mer_length), k_mers(k_mer_length)))):
#         total_d_sum.append(sum(hamming_distance_sheet(DNA_strings_k_mers(DNA_strings, k_mer_length), k_mers(k_mer_length))[l1]))
#     return k_mers(k_mer_length)[total_d_sum.index(min(total_d_sum))]
#
#
#
#
#
#
#
# DNA_strings = ["AGGCTTCTGATCGCCGTAGGCTACGAGATCTTTAGCCTCCAC",
#                "AAATTTCGCGGGTTTAGCTGGGCGGTTCGACAGGATTCCTGT",
#                "TTTAGCCACCTGACGCGGGGACCCGGCTGGCCCTGAAACTTA",
#                "TTTAGTCCGTGCTAGCAAGTACTTCGAGTACCGCATTCAAAT",
#                "TGACTCTACGTAATAGGATTTAGTGAGGCCCGCCTGGCACCG",
#                "GATGTTTTTAGTACTGTACGAACCAGGTGTATTGCTTTGCGG",
#                "GAGCAGCCGAGGTGGGCTGATTATACAATCTTTAGAGGAGCA",
#                "TTTAGCAGTATTTGTCCCCCTGGTGATCCTACATTCAGCCGA",
#                "TAAGCTTGCGAGACCCCAGATCAGTCTTGTTTTAGCACCACC",
#                "GGACGAGCGTGGTTTAGGCAGTATGACCGCAGACACACGTTA"]
#
# k_mer_length = 6
# motif_finding(DNA_strings, k_mer_length)
