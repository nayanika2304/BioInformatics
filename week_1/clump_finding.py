genome = "TATATAGACGAAATTCCATGGCTAACACGAAACTATGGCTGATGATGATGAGGATCTGTGATGAGGCGAAGAGAATAGTTATTTGACTTGCGCTACGCGAGTGCCTGCCGAGTGCCGTGCCGACATACGCAGAGAAGGTGCTAAGAGGAGGTGCTATGCGGCGTCGTCTTAAGCTCATCCGCATATCACGGCGATTTGAACACTACGGCGAACTCCACATTAGTCATAGTCATGGTTAGTCATGAGGCATCCCTAGTGAGTAAACAAATCCCATGCCCGCGGTTAGTGTTCGAAGAGGACCGCGTATAAGATGCGCCCGCTACGCCCTTTGGAAATACTCATTCAGATTGTCGTTAGCCGGTGGTGAGCGTCTACACACACACCAGCAGACACCACACCAGGACCAGGTGGAAATTTTGTTGGTTTCCTTCCCACCGCATGAGAGTTTGGACAAAGAGATACTAGACTGTAGGCCACCTGATATTACAACTCTCAAAAAAGCAGAGCAGAGAGTCGACTATGTGACTACGGAGACAGAGCATGCCCGAATGACAGAGCAGAGATACGCGGTATCCAGTCATCGCTCATAACTAGCCTGGAAAGGCCCCATCAGCCCCATCGCCGCCCCATCTCCTAGGGTTGCACTACAACAGTGTTGAGCATAGGATACTGATACTAGGATACTTACTTTTATTGATCCTGACCTGTCTATCAGTTAAGGGCAATGGCCGGCCAGCGAGGCTAGTATAATGAAAGTCCAGACCCCCGTGTCTCCACACTTCCCGATTTGCTGTTTATTAGGGTCGGACCGCGTCATAGGGGTGGCTCGAATCGTACACGTATTAACGTATTTTCACGTATTTCCTATTAACACTCGCGGGATTGGCTATAATCCAATTTACGCTCCGAGCCCAACGCCTACCATACCGTTCTAAGATTCGTCGGGATGCCCGTGTCCAGGCAACATCCGCGACGCAACATGCTAAGCATTCTAAGGTAGCGTAGGACACGTTGTCCAGTGTAGCCGAAACGAGTGTCACCATGAATCCTCGCCTAGGATGCGTTATGCTGCCCCTTGCGCTCGGATAACGAGGTGCGATGCCTTGCAGGAGGGGGTGATACAGAGTGCAACAGAGGCATGGTGGACTGTTCCGCCGTTCATGCATGAAGGACGCGGGAAATTTCAAGAGTGTCCTCTGGGCGCTCAATAATGGTAATGTCCGCGTTAAATTCTATCGGGCTACATGATGGAGGCGCAGTGTCAGTGCACAGTGTGGTGTGGTGGACACGACCTATAGGCTTGCCCGATGATTCTATAATAGCGCCAAGAAGGAAAGAACGTGAGTAGACGATAGTGGTTTAGGATGTCGATTCGTATGTGCCATTACGGGGTCTGCTGAACGGTGGTCCTGTCGAAATTTACCGACCCGGATACGACCCAGAAGTGGTTCATACAGGACTAGCCAACACGATCCCTGGAATGTACAACCACCATTTACAGCGGACGCATTGCAGTAAACATTCGATCGACAATCTGATCGGGACATGACTACTGACCTTTCAGCAGTATGAGTATCGTGGACACTCCTGATATAGCACGGCAGTCCGTATTATTAACTGGGAATGTTTAACCCCTGGTCGGCCGCCACCGCATCGAGAGGTTGAAATTACTTTACTTTTACTTTGTTTACTTTGGGGCTTTCCACGGCCAAACAAATAGGGAACCTGTACGGACCACCACTCAAGTGCTCAAGTGCTCAAGTGCTCAAGTGCTCAAGTGCTCAAGTGCTCAAGTGCTCAAGTG"
k = 8
L = 26
t = 4


def frequent_words(text, k):
    words = ""
    freq = frequency_map(text, k)
    m = max(freq.values())
    for key in freq:
        if freq[key] == m:
            words += key
    return words


def frequent_words_times(text, k):
    freq = frequency_map(text, k)
    m = max(freq.values())
    return m


def frequency_map(text, k):
    freq = {}
    n = len(text)
    for i in range(n - k + 1):
        pattern = text[i:i + k]
        freq[pattern] = 0
        for i in range(n - k + 1):
            if text[i:i + k] == pattern:
                freq[pattern] += 1
    return freq


def clump_find(genome, k, L, t):
    n = len(genome)
    final = []
    for i in range(n - L + 1):
        text = genome[i:i + L]
        x = frequent_words(text, k)
        m = frequent_words_times(text, k)
        print(m)
        if m >= t:
            final.append(x)
    final = set(final)
    print(final)
    result = ""
    for i in final:
        result = result + i + " "
    return result


print(clump_find(genome, k, L, t))



